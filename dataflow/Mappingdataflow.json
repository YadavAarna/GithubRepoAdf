{
	"name": "Mappingdataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DsBlobcsv",
						"type": "DatasetReference"
					},
					"name": "SeperateItDept"
				},
				{
					"dataset": {
						"referenceName": "DsBlobcsv",
						"type": "DatasetReference"
					},
					"name": "SeperateHRDept"
				},
				{
					"dataset": {
						"referenceName": "DsBlobcsv",
						"type": "DatasetReference"
					},
					"name": "SeperateParolDept"
				},
				{
					"dataset": {
						"referenceName": "DsBlobcsv",
						"type": "DatasetReference"
					},
					"name": "SeperateNotHrDept"
				},
				{
					"dataset": {
						"referenceName": "DsBlobcsv",
						"type": "DatasetReference"
					},
					"name": "SeperateNotItDept"
				},
				{
					"dataset": {
						"referenceName": "DsBlobcsv",
						"type": "DatasetReference"
					},
					"name": "SeperateNotParolDept"
				},
				{
					"dataset": {
						"referenceName": "DsBlobcsv",
						"type": "DatasetReference"
					},
					"name": "SeperateotherDept"
				}
			],
			"transformations": [
				{
					"name": "sort1"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmpID as short,",
				"          Name as string,",
				"          Country as string,",
				"          DeptName as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> source1",
				"source1 sort(asc(EmpID, true)) ~> sort1",
				"sort1 split(equals(DeptName,'IT'),",
				"     equals(DeptName,'HR'),",
				"     equals(DeptName,'Payroll'),",
				"     notEquals(DeptName,'HR'),",
				"     notEquals(DeptName,'IT'),",
				"     notEquals(DeptName,'Payroll'),",
				"     disjoint: false) ~> split1@(ItDept, HrDept, ParolDept, NotHrDept, NotItDept, NotPayrollDept, OtherDept)",
				"split1@ItDept sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string",
				"     ),",
				"     partitionFileNames:['SeperateItDept'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SeperateItDept",
				"split1@HrDept sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string",
				"     ),",
				"     partitionFileNames:['SeperateHRDept'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SeperateHRDept",
				"split1@ParolDept sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string",
				"     ),",
				"     partitionFileNames:['SeperateParolDept'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SeperateParolDept",
				"split1@NotHrDept sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string",
				"     ),",
				"     partitionFileNames:['SeperateNotHrDept'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SeperateNotHrDept",
				"split1@NotItDept sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string",
				"     ),",
				"     partitionFileNames:['SeperateNotItDept'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SeperateNotItDept",
				"split1@NotPayrollDept sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string",
				"     ),",
				"     partitionFileNames:['SeperateNotParolDept'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SeperateNotParolDept",
				"split1@OtherDept sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string",
				"     ),",
				"     partitionFileNames:['SeperateotherDept'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SeperateotherDept"
			]
		}
	}
}